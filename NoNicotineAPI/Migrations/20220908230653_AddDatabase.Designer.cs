// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoNicotineAPI;

#nullable disable

namespace NoNicotineAPI.Migrations
{
    [DbContext(typeof(NoNicotineContext))]
    [Migration("20220908230653_AddDatabase")]
    partial class AddDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntryFeeling", b =>
                {
                    b.Property<Guid>("EntriesEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FeelingsFeelingId")
                        .HasColumnType("int");

                    b.HasKey("EntriesEntryId", "FeelingsFeelingId");

                    b.HasIndex("FeelingsFeelingId");

                    b.ToTable("EntryFeeling");
                });

            modelBuilder.Entity("EntrySymptom", b =>
                {
                    b.Property<Guid>("EntriesEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SymptomsSymptomId")
                        .HasColumnType("int");

                    b.HasKey("EntriesEntryId", "SymptomsSymptomId");

                    b.HasIndex("SymptomsSymptomId");

                    b.ToTable("EntrySymptom");
                });

            modelBuilder.Entity("HabitPatient", b =>
                {
                    b.Property<int>("HabitsHabitId")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientsPatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HabitsHabitId", "PatientsPatientId");

                    b.HasIndex("PatientsPatientId");

                    b.ToTable("HabitPatient");
                });

            modelBuilder.Entity("LinkRequestPatient", b =>
                {
                    b.Property<int>("LinkRequestsLinkRequestId")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientsPatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LinkRequestsLinkRequestId", "PatientsPatientId");

                    b.HasIndex("PatientsPatientId");

                    b.ToTable("LinkRequestPatient");
                });

            modelBuilder.Entity("LinkRequestTherapist", b =>
                {
                    b.Property<int>("LinkRequestsLinkRequestId")
                        .HasColumnType("int");

                    b.Property<Guid>("TherapistsTherapistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LinkRequestsLinkRequestId", "TherapistsTherapistId");

                    b.HasIndex("TherapistsTherapistId");

                    b.ToTable("LinkRequestTherapist");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.Entry", b =>
                {
                    b.Property<Guid>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TherapistAllowed")
                        .HasColumnType("bit");

                    b.HasKey("EntryId");

                    b.HasIndex("PatientId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.Feeling", b =>
                {
                    b.Property<int>("FeelingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeelingId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeelingId");

                    b.ToTable("Feelings");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.Habit", b =>
                {
                    b.Property<int>("HabitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HabitId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HabitId");

                    b.ToTable("Habits");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.IdentificationType", b =>
                {
                    b.Property<int>("IdentificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentificationTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdentificationTypeId");

                    b.ToTable("IdentificationTypes");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.LinkRequest", b =>
                {
                    b.Property<int>("LinkRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkRequestId"), 1L, 1);

                    b.Property<DateTime>("DateAcceptedOrDeclined")
                        .HasColumnType("datetime2");

                    b.Property<int>("LinkRequestStatusId")
                        .HasColumnType("int");

                    b.HasKey("LinkRequestId");

                    b.HasIndex("LinkRequestStatusId");

                    b.ToTable("LinkRequests");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.LinkRequestStatus", b =>
                {
                    b.Property<int>("LinkRequestStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkRequestStatusId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LinkRequestStatusId");

                    b.ToTable("LinkRequestStatuses");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.Patient", b =>
                {
                    b.Property<Guid>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AffiliationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DailyConsumption")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TherapistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId");

                    b.HasIndex("TherapistId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.PatientRelapseHistory", b =>
                {
                    b.Property<int>("PatientRelapseHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientRelapseHistoryId"), 1L, 1);

                    b.Property<decimal>("AmountSaved")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientRelapseHistoryId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientRelapseHistoric");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.Symptom", b =>
                {
                    b.Property<int>("SymptomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymptomId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SymptomId");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.Therapist", b =>
                {
                    b.Property<Guid>("TherapistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("TherapistId");

                    b.HasIndex("IdentificationTypeId");

                    b.ToTable("Therapists");
                });

            modelBuilder.Entity("EntryFeeling", b =>
                {
                    b.HasOne("NoNicotineAPI.Models.Entry", null)
                        .WithMany()
                        .HasForeignKey("EntriesEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoNicotineAPI.Models.Feeling", null)
                        .WithMany()
                        .HasForeignKey("FeelingsFeelingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntrySymptom", b =>
                {
                    b.HasOne("NoNicotineAPI.Models.Entry", null)
                        .WithMany()
                        .HasForeignKey("EntriesEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoNicotineAPI.Models.Symptom", null)
                        .WithMany()
                        .HasForeignKey("SymptomsSymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HabitPatient", b =>
                {
                    b.HasOne("NoNicotineAPI.Models.Habit", null)
                        .WithMany()
                        .HasForeignKey("HabitsHabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoNicotineAPI.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LinkRequestPatient", b =>
                {
                    b.HasOne("NoNicotineAPI.Models.LinkRequest", null)
                        .WithMany()
                        .HasForeignKey("LinkRequestsLinkRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoNicotineAPI.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LinkRequestTherapist", b =>
                {
                    b.HasOne("NoNicotineAPI.Models.LinkRequest", null)
                        .WithMany()
                        .HasForeignKey("LinkRequestsLinkRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoNicotineAPI.Models.Therapist", null)
                        .WithMany()
                        .HasForeignKey("TherapistsTherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoNicotineAPI.Models.Entry", b =>
                {
                    b.HasOne("NoNicotineAPI.Models.Patient", "Patient")
                        .WithMany("Entries")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.LinkRequest", b =>
                {
                    b.HasOne("NoNicotineAPI.Models.LinkRequestStatus", "LinkRequestStatus")
                        .WithMany("LinkRequests")
                        .HasForeignKey("LinkRequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkRequestStatus");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.Patient", b =>
                {
                    b.HasOne("NoNicotineAPI.Models.Therapist", "Therapist")
                        .WithMany("Patients")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.PatientRelapseHistory", b =>
                {
                    b.HasOne("NoNicotineAPI.Models.Patient", "Patient")
                        .WithMany("PatientRelapseHistoric")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.Therapist", b =>
                {
                    b.HasOne("NoNicotineAPI.Models.IdentificationType", "IdentificationType")
                        .WithMany("Therapists")
                        .HasForeignKey("IdentificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentificationType");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.IdentificationType", b =>
                {
                    b.Navigation("Therapists");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.LinkRequestStatus", b =>
                {
                    b.Navigation("LinkRequests");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.Patient", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("PatientRelapseHistoric");
                });

            modelBuilder.Entity("NoNicotineAPI.Models.Therapist", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
